Description: |
  This template creates a VPC, two public and private subnets, and an ECS cluster

Parameters:

  ImageURL:
    Type: String
    #Default: public.ecr.aws/ecs-sample-image/amazon-ecs-sample:latest
    Default: yeasy/simple-web:latest

  CertificateArn:
    Type: String

Resources:

  # A VPC dedicated to the ECS cluster
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default

  # A public subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Metadata:
      guard:
        SuppressedRules:
          - SUBNET_AUTO_ASSIGN_PUBLIC_IP_DISABLED
    Properties:
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref "AWS::Region"]
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  # The route table for public subnet 1
  PublicSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Route table association for public subnet 1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnet1RouteTable
      SubnetId: !Ref PublicSubnet1

  # The default route for public subnet 1 that points to the internet gateway
  PublicSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Metadata:
      guard:
        SuppressedRules:
          - NO_UNRESTRICTED_ROUTE_TO_IGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnet1RouteTable
    DependsOn: VPCGW

  # An elastic IP for the public subnet
  PublicSubnet1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # A managed NAT gateway for public subnet 1
  PublicSubnet1NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnet1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
    DependsOn:
      - PublicSubnet1DefaultRoute
      - PublicSubnet1RouteTableAssociation

  # Second public subnet
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Metadata:
      guard:
        SuppressedRules:
          - SUBNET_AUTO_ASSIGN_PUBLIC_IP_DISABLED
    Properties:
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref "AWS::Region"]
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  # Route table for the second public subnet
  PublicSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Route table association for the second subnet
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnet2RouteTable
      SubnetId: !Ref PublicSubnet2

  # Default route for the second public subnet pointing to the internet gateway
  PublicSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Metadata:
      guard:
        SuppressedRules:
          - NO_UNRESTRICTED_ROUTE_TO_IGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnet2RouteTable
    DependsOn: VPCGW

  # An elastic IP for the second public subnet
  PublicSubnet2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Managed NAT gateway for the second public subnet
  PublicSubnet2NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnet2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
    DependsOn:
      - PublicSubnet2DefaultRoute
      - PublicSubnet2RouteTableAssociation

  # Private subnet 1
  PrivateSubnet1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref "AWS::Region"]
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC

  # Route table for the first private subnet
  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Route table association for the first private subnet
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      SubnetId: !Ref PrivateSubnet1Subnet

  # Default route for the first private subnet
  PrivateSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnet1NATGateway
      RouteTableId: !Ref PrivateSubnet1RouteTable

  # Second private subnet
  PrivateSubnet2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref "AWS::Region"]
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC

  # Route table for the second private subnet
  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Route table association for the second private subnet
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      SubnetId: !Ref PrivateSubnet2Subnet

  # Default route for the second private subnet, pointing to the NAT gateway
  PrivateSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnet2NATGateway
      RouteTableId: !Ref PrivateSubnet2RouteTable

  # Internet gateway for the public subnets
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # The VPC gateway to attach the VPC to the internet gateway
  VPCGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # The ECS cluster
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # The load balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Metadata:
      checkov:
        skip:
          - id: CKV_AWS_91
      guard:
        SuppressedRules:
          - ELB_DELETION_PROTECTION_ENABLED
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: false
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - LoadBalancerSecurityGroup
            - GroupId
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
    DependsOn:
      - PublicSubnet1DefaultRoute
      - PublicSubnet1RouteTableAssociation
      - PublicSubnet2DefaultRoute
      - PublicSubnet2RouteTableAssociation

  # Load balancer security group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref VPC

  # Egress from the load balancer to the ECS service
  LoadBalancerEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Load balancer to target
      DestinationSecurityGroupId: !GetAtt ServiceSecurityGroup.GroupId
      FromPort: 80
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      IpProtocol: tcp
      ToPort: 80

  # Load balancer listener configuration
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Metadata:
      guard:
        SuppressedRules:
          - ELBV2_ACM_CERTIFICATE_REQUIRED
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06

  # Load balancer target group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "10"
        - Key: stickiness.enabled
          Value: "false"
      TargetType: ip
      VpcId: !Ref VPC

  # Task role
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"

  # ECS task definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Cpu: 1024
          Essential: true
          Image: !Ref ImageURL
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${Logs}"
              awslogs-stream-prefix: ecs-cw-eval-svc
              awslogs-region: !Sub "${AWS::Region}"
          Memory: 2048
          Name: app
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          Ulimits:
            - HardLimit: 1024000
              Name: nofile
              SoftLimit: 1024000
      Cpu: "1024"
      ExecutionRoleArn:
        Fn::GetAtt:
          - TaskExecutionRole
          - Arn
      Family: ecs-cw-eval
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
        - FARGATE
      TaskRoleArn: !GetAtt TaskRole.Arn

  # ECS task execution role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"

  # ECS task execution policy
  TaskExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Effect: Allow
            Resource: "*"
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: !GetAtt Logs.Arn
        Version: "2012-10-17"
      PolicyName: EcsxDemoPolicy
      Roles:
        - !Ref TaskExecutionRole

  # A log group for ECS task logs
  Logs:
    Type: AWS::Logs::LogGroup
    Metadata:
      checkov:
        skip:
          - id: CKV_AWS_158
      guard:
        SuppressedRules:
          - CLOUDWATCH_LOG_GROUP_ENCRYPTED
    Properties:
      LogGroupName: ecs-cw-eval-svc-logs
      RetentionInDays: 30
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  # The ECS service
  Service:
    Type: AWS::ECS::Service
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - E3002
    Properties:
      Cluster:
        !Ref Cluster
      DeploymentConfiguration:
        Alarms:
          AlarmNames: []
          Enable: false
          Rollback: false
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: 
            - !GetAtt ServiceSecurityGroup.GroupId
          Subnets:
            - !Ref PrivateSubnet1Subnet
            - !Ref PrivateSubnet2Subnet
      TaskDefinition: !Ref TaskDefinition
    DependsOn:
      - LoadBalancerListener
      - TaskRole

  # ECS service security group
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EcsAsCd/ecs-cw-eval-svc-service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId: !Ref VPC
    DependsOn:
      - TaskRole

  # Ingress rule from the service to the load balancer
  Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Load balancer to target
      FromPort: 80
      GroupId: !GetAtt ServiceSecurityGroup.GroupId
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      ToPort: 80
    DependsOn: TaskRole

Outputs:
  LoadBalancerDNS:
    Value: !GetAtt LoadBalancer.DNSName

