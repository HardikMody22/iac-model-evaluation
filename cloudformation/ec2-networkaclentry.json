{
    "Description": "This stack automates the creation of an EC2 Newtork Acl and\nits entries\n",
    "Conditions": {
        "IsUsEast1": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-east-1"
            ]
        }
    },
    "Resources": {
        "Vpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/24"
            }
        },
        "DhcpOptions": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "DomainName": {
                    "Fn::If": [
                        "IsUsEast1",
                        "ec2.internal",
                        {
                            "Fn::Sub": "${AWS::Region}.compute.internal"
                        }
                    ]
                },
                "DomainNameServers": [
                    "AmazonProvidedDNS"
                ],
                "NetbiosNodeType": 2
            }
        },
        "VpcDhcpOptions": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "DhcpOptionsId": {
                    "Fn::GetAtt": [
                        "DhcpOptions",
                        "DhcpOptionsId"
                    ]
                },
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "Subnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": "us-east-1"
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::Cidr": [
                                {
                                    "Fn::GetAtt": [
                                        "Vpc",
                                        "CidrBlock"
                                    ]
                                },
                                2,
                                6
                            ]
                        }
                    ]
                },
                "MapPublicIpOnLaunch": false,
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "NetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "InboundHTTPSRule": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": 100,
                "Protocol": 6,
                "RuleAction": "allow",
                "CidrBlock": {
                    "Fn::GetAtt": [
                        "Vpc",
                        "CidrBlock"
                    ]
                },
                "PortRange": {
                    "From": 443,
                    "To": 443
                }
            }
        },
        "InboundSSHRule": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": 101,
                "Protocol": 6,
                "RuleAction": "allow",
                "CidrBlock": {
                    "Fn::GetAtt": [
                        "Vpc",
                        "CidrBlock"
                    ]
                },
                "PortRange": {
                    "From": 22,
                    "To": 22
                }
            }
        },
        "OutboundRule": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": 100,
                "Protocol": -1,
                "Egress": true,
                "RuleAction": "allow",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "Subnet1NetworkAcl": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Fn::GetAtt": [
                        "Subnet1",
                        "SubnetId"
                    ]
                },
                "NetworkAclId": {
                    "Fn::GetAtt": [
                        "NetworkAcl",
                        "Id"
                    ]
                }
            }
        }
    }
}
